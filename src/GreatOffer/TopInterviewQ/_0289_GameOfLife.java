package GreatOffer.TopInterviewQ;


// 根据百度百科, 生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。
// 给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态：
// 1 即为活细胞（live），或 0 即为死细胞（dead)。每个细胞与其八个相邻位置（水平，垂直，对角线）
// 的细胞都遵循以下四条生存定律：
//  1.如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
//  2.如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
//  3.如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
//  4.如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
// 下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。
// 给你 m x n 网格面板 board 的当前状态，返回下一个状态。

// 不能使用额外辅助空间，只能原地调整。

public class _0289_GameOfLife {

    // 因为要原地修改矩阵的值，所以得使用位运算。每个位置上的值不是1就是0，但是其一共有32个状态位，只有最低的一位上
    // 是有效值，其余都无用，所以我们可以使用倒数第二位来表示下一个状态该位置上的值应该是多少。
    // 比如有个位置上的值为：00..010 == 2  表示该位置上当前状态是0，死细胞，但是下个状态要变成活细胞。

    public static void gameOfLife(int[][] board) {
        int N = board.length;
        int M = board[0].length;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                int neigh = neighbors(board, i, j);
                // 有三个活细胞下个状态一定是活
                if (neigh == 3 || (board[i][j] == 1 && neigh == 2))
                    // 让倒数第二位上的值变成1
                    board[i][j] |= 2;
            }
        }
        // 只需要把每个位置上的值向右移动一位，那么最后一位的状态是上个时刻的，刚好被丢弃了，而倒数第二位状态
        // 刚好来到最低位。
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                board[i][j] >>= 1;
            }
        }
    }


    // (i,j)位置附近的8个相邻位置里有多少个活细胞
    private static int neighbors(int[][] board, int i, int j) {
        return f(board, i - 1, j - 1) + f(board, i - 1, j) + f(board, i - 1, j + 1) +
                f(board, i, j - 1) + f(board, i, j + 1) + f(board, i + 1, j - 1) +
                f(board, i + 1, j) + f(board, i + 1, j + 1);
    }


    // (i, j)如果是1，就返回1，不是1，就返回0
    // 为什么要用这种方式来判断当前位置是否为1呢？因为其状态位可能已经被修改了。不能用字面值来判断当前位置
    // 是否为1。
    private static int f(int[][] board, int i, int j) {
        return (i >= 0 && i < board.length && j >= 0 && j < board[0].length &&
                (board[i][j] & 1) == 1) ? 1 : 0;
    }
}
