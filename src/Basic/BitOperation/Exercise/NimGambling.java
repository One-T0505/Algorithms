package Basic.BitOperation;


// Nim博弈问题。给定一个无序正数数组，有两个人，一个先手一个后手。每个人都可以在任意一个元素上拿取至少为1但不超过该元素的值。
// 先后交替。如果一个人拿完之后数组全为0了，那么该人获胜。两个人都绝顶聪明。

public class NimGambling {

    // 结论是这样的：如果数组初始的异或和为0，则后手赢；否则，先手赢。为什么？每个人的目的就是让自己拿完后，数组元素全为0，
    // 即异或和为0。先手每一步的目的就是让拿完之后数组的异或和为0，虽然异或和为0不代表数组全为0，但是如果每一步都保持这样的
    // 原则去拿数，那到最后就能赢。所以，先手的目标很简单：每次都让拿完数之后数组的异或和为0。后手不管怎么拿，都至少要拿1，并且
    // 只能在一个数上拿，所以状态必然改变，会让先手留给自己的异或和从0变成非0。
    // 但是如果一开始数组的异或和为0，那先手必输。
    public static String Nim(int[] arr) {
        int eor = 0;
        for (int elem : arr)
            eor ^= elem;
        return eor == 0 ? "后手" : "先手";
    }

}
