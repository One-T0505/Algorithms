package Basic.Recurse;

// 给定一个整数，写一个函数来判断它是否是 4 的幂次方。如果是，返回 true ；否则，返回 false 。
// 整数 n 是 4 的幂次方需满足：存在整数 x 使得 n == 4^x

public class _0342_Code {

    // n == 4^x  所以，如果 n < 1， 那直接不可能  因为n为int，<1只可能是0了，4的次幂 > 0
    public boolean isPowerOfFour(int n) {
        if(n < 1)
            return false;
        // 范围合理的话，先检查n是否为2的次幂。如果连2的次幂都不是，就不用继续查了，
        // 如果是2的次幂才有必要继续下去
        // (n & 0xaaaaaaaa) == 0  这个就是判断n是否为4的次幂的表达式。
        // 假如n是4的次幂，那么它的二进制形式只有1个1，其余全是0
        // 如果把最低位的二进制位编号为第0位，那么这个唯一的1必然在偶数位上，且不可能在第0位上。
        // 比如 4-->100  16-->10000
        // 我们可以构造一个32位的掩码，将所有奇数位上都设置为1：1010 1010 1010 1010 1010 1010 1010 1010
        // 其十六进制就是：aaaa aaaa  用掩码和n做与运算，只有奇数位上出现了一个1，直接false，只有
        // 所有奇数位上都没出现1，才是true
        return (n & (n - 1)) == 0 && (n & 0xaaaaaaaa) == 0;
    }


    // 第二种判断方式
    // 如果 n 是 4 的幂，那么它可以表示成 4^x 的形式，我们可以发现它除以 3 的余数一定为 1，即：
    // 如果 n 是 2 的幂却不是 4 的幂，那么它可以表示成 4^x * 2 的形式，此时它除以 3 的余数一定为 2。
    // 因此我们可以通过 n 除以 3 的余数是否为 1 来判断 n 是否是 4 的幂。
    public boolean isPowerOfFour2(int n) {
        return n > 0 && (n & (n - 1)) == 0 && n % 3 == 1;
    }
}
